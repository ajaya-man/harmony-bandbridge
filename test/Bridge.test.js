const { expectRevert } = require("openzeppelin-test-helpers");
const Bridge = artifacts.require("BridgeMock");
const ReceiverMock = artifacts.require("ReceiverMock");

require("chai").should();

contract("Bridge", ([_, owner, alice, bob]) => {
  context("Checking oracle state relay (4 validators)", () => {
    beforeEach(async () => {
      this.bridge = await Bridge.new(
        [
          ["0x652D89a66Eb4eA55366c45b1f9ACfc8e2179E1c5", 100],
          ["0x88e1cd00710495EEB93D4f522d16bC8B87Cb00FE", 100],
          ["0xaAA22E077492CbaD414098EBD98AA8dc1C7AE8D9", 100],
          ["0xB956589b6fC5523eeD0d9eEcfF06262Ce84ff260", 100],
        ],
        { from: owner },
      );
    });

    it("should accept correct state relay (validator power is more than 2/3)", async () => {
      await this.bridge.relayOracleState(
        "63407", // _blockHeight,
        [
          "0x2B14E5AB19A88F23B3F6C694659374DF21E21935A7C0B8565C4E7B43AAB3BB43", // accToMemCapStoresMerkleHash
          "0x06223635C7D081E76F30998DA7D601AB9AB8602C9AE7095E319C68F4CE2F5F73", // mintStoresMerkleHash
          "0xC744B497E2569517AA2F053E2A4E09C67427DC0FD8840048C607AF8F17D9100C", // oracleIAVLStateHash
          "0xAE658B0EA9B1C87323D0FA810ADBE9DB91BE0BAEA62D29F376488666ECA9BBEB", // paramsAndSlashingStoresMerkleHash
          "0xAA66B682A3FE96C372A095A43F2E73B33E89D835DB3BBF2496546328A7BD4961", // stakingAndUpgradeStoresMerkleHash
        ],
        [
          "0x32FA694879095840619F5E49380612BD296FF7E950EAFB66FF654D99CA70869E", // versionAndChainIdHash
          "0x9F667F22196CFEBD590E3B178148942EF40C5B693336BF20608D5F21AA679ABC", // timeHash
          "0xF665C04557D07EAACFC46F2E5B5D267C3B2C4EEAF395784F30CC84266816A89D", // lastBlockIDAndOther
          "0xE3BB39F3B621939B734AF396D7CF5CCFDEDD4A3D16F139FD481874BC6F6E52B4", // nextValidatorHashAndConsensusHash
          "0x6E340B9CFFB37A989CA544E6BB780A2C78901D3FB33738768511A30617AFA01D", // lastResultsHash
          "0xD991DA4D4E69473CC75A4B819F9E07D4956671A6F4A74DF4CC16596FCBE68137", // evidenceAndProposerHash
        ],
        "0x6E080211AFF700000000000022480A20", // _signedDataPrefix
        [
          [
            "0x62A900783D67A397A0CE36C82108122B97ACF88034CA917209937E2FF29EDB1C", // r
            "0x378595FF3223971F63946D133DE29189497BC800F26370AF44512DDC3B02A1F1", // s
            27, // v
            "0x12240A205F339FD218803D4B7BCBEC09FB24D1BCEAE0938FA20FD028C2993D9731690CBB10012A0C08DFD6A0F50510D1E2E19103320962616E64636861696E", // signedDataSuffix
          ],
          [
            "0x97009E1695FBD0FA6708C08C31EF92D28FA1AC64C6E6346193DE375AD377DE44", // r
            "0x54DB42DFE62EC6B2C755DB707D7DF48EF49485EF8282C91054B728F052E452AC", // s
            28, // v
            "0x12240A205F339FD218803D4B7BCBEC09FB24D1BCEAE0938FA20FD028C2993D9731690CBB10012A0C08DFD6A0F5051084A2F89103320962616E64636861696E", // signedDataSuffix
          ],
          [
            "0x950C0D5475AB4D2E7257811A4F304201D6CC52F7F5D06B8CDBB53922C4BCD140", // r
            "0x4C747F4985569E59401E450F12F37933AED9EB9FB2F20CF022DAC9D31B9AADDC", // s
            28, // v
            "0x12240A205F339FD218803D4B7BCBEC09FB24D1BCEAE0938FA20FD028C2993D9731690CBB10012A0C08DFD6A0F505109685E29103320962616E64636861696E", // signedDataSuffix
          ],
        ],
      );
    });

    it("should revert if sum of validator powers is less than 2/3)", async () => {
      await expectRevert(
        this.bridge.relayOracleState(
          "63407", // _blockHeight,
          [
            "0x2B14E5AB19A88F23B3F6C694659374DF21E21935A7C0B8565C4E7B43AAB3BB43", // accToMemCapStoresMerkleHash
            "0x06223635C7D081E76F30998DA7D601AB9AB8602C9AE7095E319C68F4CE2F5F73", // mintStoresMerkleHash
            "0xC744B497E2569517AA2F053E2A4E09C67427DC0FD8840048C607AF8F17D9100C", // oracleIAVLStateHash
            "0xAE658B0EA9B1C87323D0FA810ADBE9DB91BE0BAEA62D29F376488666ECA9BBEB", // paramsAndSlashingStoresMerkleHash
            "0xAA66B682A3FE96C372A095A43F2E73B33E89D835DB3BBF2496546328A7BD4961", // stakingAndUpgradeStoresMerkleHash
          ],
          [
            "0x32FA694879095840619F5E49380612BD296FF7E950EAFB66FF654D99CA70869E", // versionAndChainIdHash
            "0x9F667F22196CFEBD590E3B178148942EF40C5B693336BF20608D5F21AA679ABC", // timeHash
            "0xF665C04557D07EAACFC46F2E5B5D267C3B2C4EEAF395784F30CC84266816A89D", // lastBlockIDAndOther
            "0xE3BB39F3B621939B734AF396D7CF5CCFDEDD4A3D16F139FD481874BC6F6E52B4", // nextValidatorHashAndConsensusHash
            "0x6E340B9CFFB37A989CA544E6BB780A2C78901D3FB33738768511A30617AFA01D", // lastResultsHash
            "0xD991DA4D4E69473CC75A4B819F9E07D4956671A6F4A74DF4CC16596FCBE68137", // evidenceAndProposerHash
          ],
          "0x6E080211AFF700000000000022480A20", // _signedDataPrefix
          [
            [
              "0x97009E1695FBD0FA6708C08C31EF92D28FA1AC64C6E6346193DE375AD377DE44", // r
              "0x54DB42DFE62EC6B2C755DB707D7DF48EF49485EF8282C91054B728F052E452AC", // s
              28, // v
              "0x12240A205F339FD218803D4B7BCBEC09FB24D1BCEAE0938FA20FD028C2993D9731690CBB10012A0C08DFD6A0F5051084A2F89103320962616E64636861696E", // signedDataSuffix
            ],
            [
              "0x950C0D5475AB4D2E7257811A4F304201D6CC52F7F5D06B8CDBB53922C4BCD140", // r
              "0x4C747F4985569E59401E450F12F37933AED9EB9FB2F20CF022DAC9D31B9AADDC", // s
              28, // v
              "0x12240A205F339FD218803D4B7BCBEC09FB24D1BCEAE0938FA20FD028C2993D9731690CBB10012A0C08DFD6A0F505109685E29103320962616E64636861696E", // signedDataSuffix
            ],
          ],
        ),
        "INSUFFICIENT_VALIDATOR_SIGNATURES",
      );
    });

    it("should not accept out-of-order signatures", async () => {
      await expectRevert(
        this.bridge.relayOracleState(
          "63407", // _blockHeight,
          [
            "0x2B14E5AB19A88F23B3F6C694659374DF21E21935A7C0B8565C4E7B43AAB3BB43", // accToMemCapStoresMerkleHash
            "0x06223635C7D081E76F30998DA7D601AB9AB8602C9AE7095E319C68F4CE2F5F73", // mintStoresMerkleHash
            "0xC744B497E2569517AA2F053E2A4E09C67427DC0FD8840048C607AF8F17D9100C", // oracleIAVLStateHash
            "0xAE658B0EA9B1C87323D0FA810ADBE9DB91BE0BAEA62D29F376488666ECA9BBEB", // paramsAndSlashingStoresMerkleHash
            "0xAA66B682A3FE96C372A095A43F2E73B33E89D835DB3BBF2496546328A7BD4961", // stakingAndUpgradeStoresMerkleHash
          ],
          [
            "0x32FA694879095840619F5E49380612BD296FF7E950EAFB66FF654D99CA70869E", // versionAndChainIdHash
            "0x9F667F22196CFEBD590E3B178148942EF40C5B693336BF20608D5F21AA679ABC", // timeHash
            "0xF665C04557D07EAACFC46F2E5B5D267C3B2C4EEAF395784F30CC84266816A89D", // lastBlockIDAndOther
            "0xE3BB39F3B621939B734AF396D7CF5CCFDEDD4A3D16F139FD481874BC6F6E52B4", // nextValidatorHashAndConsensusHash
            "0x6E340B9CFFB37A989CA544E6BB780A2C78901D3FB33738768511A30617AFA01D", // lastResultsHash
            "0xD991DA4D4E69473CC75A4B819F9E07D4956671A6F4A74DF4CC16596FCBE68137", // evidenceAndProposerHash
          ],
          "0x6E080211AFF700000000000022480A20", // _signedDataPrefix
          [
            [
              "0x950C0D5475AB4D2E7257811A4F304201D6CC52F7F5D06B8CDBB53922C4BCD140", // r
              "0x4C747F4985569E59401E450F12F37933AED9EB9FB2F20CF022DAC9D31B9AADDC", // s
              28, // v
              "0x12240A205F339FD218803D4B7BCBEC09FB24D1BCEAE0938FA20FD028C2993D9731690CBB10012A0C08DFD6A0F505109685E29103320962616E64636861696E", // signedDataSuffix
            ],
            [
              "0x97009E1695FBD0FA6708C08C31EF92D28FA1AC64C6E6346193DE375AD377DE44", // r
              "0x54DB42DFE62EC6B2C755DB707D7DF48EF49485EF8282C91054B728F052E452AC", // s
              28, // v
              "0x12240A205F339FD218803D4B7BCBEC09FB24D1BCEAE0938FA20FD028C2993D9731690CBB10012A0C08DFD6A0F5051084A2F89103320962616E64636861696E", // signedDataSuffix
            ],
            [
              "0x62A900783D67A397A0CE36C82108122B97ACF88034CA917209937E2FF29EDB1C", // r
              "0x378595FF3223971F63946D133DE29189497BC800F26370AF44512DDC3B02A1F1", // s
              27, // v
              "0x12240A205F339FD218803D4B7BCBEC09FB24D1BCEAE0938FA20FD028C2993D9731690CBB10012A0C08DFD6A0F50510D1E2E19103320962616E64636861696E", // signedDataSuffix
            ],
          ],
        ),
        "INVALID_SIGNATURE_SIGNER_ORDER",
      );
    });

    it("should not accept invalid signature", async () => {
      await expectRevert(
        this.bridge.relayOracleState(
          "63407", // _blockHeight,
          [
            "0x2B14E5AB19A88F23B3F6C694659374DF21E21935A7C0B8565C4E7B43AAB3BB43", // accToMemCapStoresMerkleHash
            "0x06223635C7D081E76F30998DA7D601AB9AB8602C9AE7095E319C68F4CE2F5F73", // mintStoresMerkleHash
            "0xC744B497E2569517AA2F053E2A4E09C67427DC0FD8840048C607AF8F17D9100C", // oracleIAVLStateHash
            "0xAE658B0EA9B1C87323D0FA810ADBE9DB91BE0BAEA62D29F376488666ECA9BBEB", // paramsAndSlashingStoresMerkleHash
            "0xAA66B682A3FE96C372A095A43F2E73B33E89D835DB3BBF2496546328A7BD4961", // stakingAndUpgradeStoresMerkleHash
          ],
          [
            "0x32FA694879095840619F5E49380612BD296FF7E950EAFB66FF654D99CA70869E", // versionAndChainIdHash
            "0x9F667F22196CFEBD590E3B178148942EF40C5B693336BF20608D5F21AA679ABC", // timeHash
            "0xF665C04557D07EAACFC46F2E5B5D267C3B2C4EEAF395784F30CC84266816A89D", // lastBlockIDAndOther
            "0xE3BB39F3B621939B734AF396D7CF5CCFDEDD4A3D16F139FD481874BC6F6E52B4", // nextValidatorHashAndConsensusHash
            "0x6E340B9CFFB37A989CA544E6BB780A2C78901D3FB33738768511A30617AFA01D", // lastResultsHash
            "0xD991DA4D4E69473CC75A4B819F9E07D4956671A6F4A74DF4CC16596FCBE68137", // evidenceAndProposerHash
          ],
          "0x6E080211AFF700000000000022480A20", // _signedDataPrefix
          [
            [
              // This sigature is wrong
              "0x62A900783D67A397A0CE36C82108122B97ACF88034CA917209937E2FF29EDB1C", // r
              "0x378595FF3223971F63946D133DE29189497BC800F26370AF44512DDC3B02A1F1", // s
              28, // v
              "0x12240A205F339FD218803D4B7BCBEC09FB24D1BCEAE0938FA20FD028C2993D9731690CBB10012A0C08DFD6A0F50510D1E2E19103320962616E64636861696E", // signedDataSuffix
            ],
            [
              "0x97009E1695FBD0FA6708C08C31EF92D28FA1AC64C6E6346193DE375AD377DE44", // r
              "0x54DB42DFE62EC6B2C755DB707D7DF48EF49485EF8282C91054B728F052E452AC", // s
              28, // v
              "0x12240A205F339FD218803D4B7BCBEC09FB24D1BCEAE0938FA20FD028C2993D9731690CBB10012A0C08DFD6A0F5051084A2F89103320962616E64636861696E", // signedDataSuffix
            ],
            [
              "0x950C0D5475AB4D2E7257811A4F304201D6CC52F7F5D06B8CDBB53922C4BCD140", // r
              "0x4C747F4985569E59401E450F12F37933AED9EB9FB2F20CF022DAC9D31B9AADDC", // s
              28, // v
              "0x12240A205F339FD218803D4B7BCBEC09FB24D1BCEAE0938FA20FD028C2993D9731690CBB10012A0C08DFD6A0F505109685E29103320962616E64636861696E", // signedDataSuffix
            ],
          ],
        ),
        "INSUFFICIENT_VALIDATOR_SIGNATURES",
      );
    });
  });

  context("Checking data verification", () => {
    beforeEach(async () => {
      this.bridge = await Bridge.new([]);
      await this.bridge.setOracleState(
        "182", // _blockHeight
        "0xB59AD73DB9147F6AC7C88A64B1BAD51C90F8C48B4487ADA9276A323808E56E3E", // _oracleIAVLStateHash
      );
    });

    it("should not accept unrelayed block", async () => {
      await expectRevert(
        this.bridge.verifyOracleData(
          "9999", // _blockHeight
          ["beeb", 1, "0x0000000342544300000000000003e8", 4, 4], // _requestPacket
          ["beeb", 1, 4, 1591598291, 1591598295, 1, "0x0000000000948e69"], // _responsePacket
          "163", // _version
          [
            [
              true, // isDataOnRight
              "2", // subtreeHeight
              "3", // subtreeSize
              "180", // subtreeVersion
              "0x4D4479F8CF02CBA65F95231B06EEAA51E99F75A153C3ED28D9A86B565DE59306", // siblingHash
            ],
            [
              true, // isDataOnRight
              "3", // subtreeHeight
              "5", // subtreeSize
              "180", // subtreeVersion
              "0x8861AD25F99A677D4934541A99928CDBE18BBF34EE39D754E93CCE090BE70502", // siblingHash
            ],
            [
              true, // isDataOnRight
              "4", // subtreeHeight
              "9", // subtreeSize
              "180", // subtreeVersion
              "0x5D162C955AE030390CEA63CA7ED8BA72B7A49E0BC73DAEA23CF6B79E8899C49C", // siblingHash
            ],
            [
              true, // isDataOnRight
              "5", // subtreeHeight
              "16", // subtreeSize
              "180", // subtreeVersion
              "0x08DD24B96C3C9413BA46A7149232C18AD66DB68AC04CF2A770B707B6D29FC8F7", // siblingHash
            ],
            [
              true, // isDataOnRight
              "6", // subtreeHeight
              "24", // subtreeSize
              "180", // subtreeVersion
              "0x32D2E1CC89F3FBD139C35B5D5FE6430799AEEFD495C882C419A120B7257E3F5A", // siblingHash
            ],
            [
              true, // isDataOnRight
              "7", // subtreeHeight
              "62", // subtreeSize
              "181", // subtreeVersion
              "0x691B2504CD253868BCCD43774C8B8DBFA1E2D0D41C07C23F2F1237FCF0D2F0D8", // siblingHash
            ],
          ],
        ),
        "NO_ORACLE_ROOT_STATE_DATA",
      );
    });

    it("should accept correct data verification", async () => {
      const ret = await this.bridge.verifyOracleData(
        "182", // _blockHeight
        ["beeb", 1, "0x0000000342544300000000000003e8", 4, 4], // _requestPacket
        ["beeb", 1, 4, 1591598291, 1591598295, 1, "0x0000000000948e69"], // _responsePacket
        "163", // _version
        [
          [
            true, // isDataOnRight
            "2", // subtreeHeight
            "3", // subtreeSize
            "180", // subtreeVersion
            "0x4D4479F8CF02CBA65F95231B06EEAA51E99F75A153C3ED28D9A86B565DE59306", // siblingHash
          ],
          [
            true, // isDataOnRight
            "3", // subtreeHeight
            "5", // subtreeSize
            "180", // subtreeVersion
            "0x8861AD25F99A677D4934541A99928CDBE18BBF34EE39D754E93CCE090BE70502", // siblingHash
          ],
          [
            true, // isDataOnRight
            "4", // subtreeHeight
            "9", // subtreeSize
            "180", // subtreeVersion
            "0x5D162C955AE030390CEA63CA7ED8BA72B7A49E0BC73DAEA23CF6B79E8899C49C", // siblingHash
          ],
          [
            true, // isDataOnRight
            "5", // subtreeHeight
            "16", // subtreeSize
            "180", // subtreeVersion
            "0x08DD24B96C3C9413BA46A7149232C18AD66DB68AC04CF2A770B707B6D29FC8F7", // siblingHash
          ],
          [
            true, // isDataOnRight
            "6", // subtreeHeight
            "24", // subtreeSize
            "180", // subtreeVersion
            "0x32D2E1CC89F3FBD139C35B5D5FE6430799AEEFD495C882C419A120B7257E3F5A", // siblingHash
          ],
          [
            true, // isDataOnRight
            "7", // subtreeHeight
            "62", // subtreeSize
            "181", // subtreeVersion
            "0x691B2504CD253868BCCD43774C8B8DBFA1E2D0D41C07C23F2F1237FCF0D2F0D8", // siblingHash
          ],
        ],
      );
      ret[0]
        .toString()
        .should.eq(
          ["beeb", 1, "0x0000000342544300000000000003e8", 4, 4].toString(),
        );
      ret[1]
        .toString()
        .should.eq(
          ["beeb", 1, 4, 1591598291, 1591598295, 1, "0x0000000000948e69"].toString(),
        );
    });

    it("should not accept invalid data verification", async () => {
      await expectRevert(
        this.bridge.verifyOracleData(
          "182", // _blockHeight
          ["wrong_id", 1, "0x0000000342544300000000000003e8", 4, 4], // _requestPacket
          ["wrong_id", 1, 4, 1591598291, 1591598295, 1, "0x0000000000948e69"], // _responsePacket
          "163", // _version
          [
            [
              true, // isDataOnRight
              "2", // subtreeHeight
              "3", // subtreeSize
              "180", // subtreeVersion
              "0x4D4479F8CF02CBA65F95231B06EEAA51E99F75A153C3ED28D9A86B565DE59306", // siblingHash
            ],
            [
              true, // isDataOnRight
              "3", // subtreeHeight
              "5", // subtreeSize
              "180", // subtreeVersion
              "0x8861AD25F99A677D4934541A99928CDBE18BBF34EE39D754E93CCE090BE70502", // siblingHash
            ],
            [
              true, // isDataOnRight
              "4", // subtreeHeight
              "9", // subtreeSize
              "180", // subtreeVersion
              "0x5D162C955AE030390CEA63CA7ED8BA72B7A49E0BC73DAEA23CF6B79E8899C49C", // siblingHash
            ],
            [
              true, // isDataOnRight
              "5", // subtreeHeight
              "16", // subtreeSize
              "180", // subtreeVersion
              "0x08DD24B96C3C9413BA46A7149232C18AD66DB68AC04CF2A770B707B6D29FC8F7", // siblingHash
            ],
            [
              true, // isDataOnRight
              "6", // subtreeHeight
              "24", // subtreeSize
              "180", // subtreeVersion
              "0x32D2E1CC89F3FBD139C35B5D5FE6430799AEEFD495C882C419A120B7257E3F5A", // siblingHash
            ],
            [
              true, // isDataOnRight
              "7", // subtreeHeight
              "62", // subtreeSize
              "181", // subtreeVersion
              "0x691B2504CD253868BCCD43774C8B8DBFA1E2D0D41C07C23F2F1237FCF0D2F0D8", // siblingHash
            ],
          ],
        ),
        "INVALID_ORACLE_DATA_PROOF",
      );
    });

    it("should not accept incomplete proof", async () => {
      await expectRevert(
        this.bridge.verifyOracleData(
          "182", // _blockHeight
          ["beeb", 1, "0x0000000342544300000000000003e8", 4, 4], // _requestPacket
          ["beeb", 1, 4, 1591598291, 1591598295, 1, "0x0000000000948e69"], // _responsePacket
          "163", // _version
          [
            [
              true, // isDataOnRight
              "2", // subtreeHeight
              "3", // subtreeSize
              "180", // subtreeVersion
              "0x4D4479F8CF02CBA65F95231B06EEAA51E99F75A153C3ED28D9A86B565DE59306", // siblingHash
            ],
            [
              true, // isDataOnRight
              "3", // subtreeHeight
              "5", // subtreeSize
              "180", // subtreeVersion
              "0x8861AD25F99A677D4934541A99928CDBE18BBF34EE39D754E93CCE090BE70502", // siblingHash
            ],
            [
              true, // isDataOnRight
              "7", // subtreeHeight
              "62", // subtreeSize
              "181", // subtreeVersion
              "0x691B2504CD253868BCCD43774C8B8DBFA1E2D0D41C07C23F2F1237FCF0D2F0D8", // siblingHash
            ],
          ],
        ),
        "INVALID_ORACLE_DATA_PROOF",
      );
    });
  });

  context("Relay and Verfiy data", () => {
    beforeEach(async () => {
      this.bridge = await Bridge.new([
        ["0x88e1cd00710495EEB93D4f522d16bC8B87Cb00FE", 100],
        ["0x652D89a66Eb4eA55366c45b1f9ACfc8e2179E1c5", 100],
        ["0xB956589b6fC5523eeD0d9eEcfF06262Ce84ff260", 100],
        ["0xaAA22E077492CbaD414098EBD98AA8dc1C7AE8D9", 100],
      ]);

      this.receiver = await ReceiverMock.new(this.bridge.address);
    });

    it("should accept valid relay and verify", async () => {
      await this.receiver.relayAndSafe(
        "0x
      );
      (await this.bridge.oracleStates(182))
        .toString()
        .should.eq(
          "0xb59ad73db9147f6ac7c88a64b1bad51c90f8c48b4487ada9276a323808e56e3e",
        );
      const req = await this.receiver.latestReq();
      req[0].toString().should.eq("beeb");
      req[1].toString().should.eq("1");
      req[2].toString().should.eq("0x0000000342544300000000000003e8");
      req[3].toString().should.eq("4");
      req[4].toString().should.eq("4");
      const res = await this.receiver.latestRes();
      res[0].toString().should.eq("beeb");
      res[1].toString().should.eq("1");
      res[2].toString().should.eq("4");
      res[3].toString().should.eq("1591598291");
      res[4].toString().should.eq("1591598295");
      res[5].toString().should.eq("1");
      res[6].toString().should.eq("0x0000000000948e69");
    });

    it("should accept valid relay and verify case 2", async () => {
      await this.receiver.relayAndSafe(
        "0x
      );
      (await this.bridge.oracleStates(1856))
        .toString()
        .should.eq(
          "0xa761e03b3dc5df198ecdd53f168b3a6f03a2e17e75da5fe1f2bdfb9abffcd2d9",
        );
      const req = await this.receiver.latestReq();
      req[0].toString().should.eq("");
      req[1].toString().should.eq("1");
      req[2].toString().should.eq("0x0000000342544300000000000003e8");
      req[3].toString().should.eq("4");
      req[4].toString().should.eq("4");
      const res = await this.receiver.latestRes();
      res[0].toString().should.eq("");
      res[1].toString().should.eq("2");
      res[2].toString().should.eq("4");
      res[3].toString().should.eq("1591600604");
      res[4].toString().should.eq("1591600609");
      res[5].toString().should.eq("1");
      res[6].toString().should.eq("0x0000000000948081");
    });

    it("should revert invalid relay and verify", async () => {
      await expectRevert(
        this.receiver.relayAndSafe(
          "0x
        ),
        "RELAY_ORACLE_STATE_FAILED.",
      );

      await expectRevert(
        this.receiver.relayAndSafe(
          "0x
        ),
        "VERIFY_ORACLE_DATA_FAILED.",
      );
    });
  });

  context("Update provider powers", () => {
    beforeEach(async () => {
      this.bridge = await Bridge.new(
        [
          ["0x652D89a66Eb4eA55366c45b1f9ACfc8e2179E1c5", 100],
          ["0x88e1cd00710495EEB93D4f522d16bC8B87Cb00FE", 100],
          ["0xaAA22E077492CbaD414098EBD98AA8dc1C7AE8D9", 100],
          ["0xB956589b6fC5523eeD0d9eEcfF06262Ce84ff260", 100],
        ],
        { from: owner },
      );
    });

    it("should revert if update validator power by non-onwer", async () => {
      await expectRevert(
        this.bridge.updateValidatorPowers(
          [["0x652D89a66Eb4eA55366c45b1f9ACfc8e2179E1c5", 150]],
          {
            from: alice,
          },
        ),
        "Ownable: caller is not the owner.",
      );
    });

    it("should update a validator power", async () => {
      await this.bridge.updateValidatorPowers(
        [["0x652D89a66Eb4eA55366c45b1f9ACfc8e2179E1c5", 150]],
        { from: owner },
      );

      (
        await this.bridge.validatorPowers(
          "0x652D89a66Eb4eA55366c45b1f9ACfc8e2179E1c5",
        )
      )
        .toString()
        .should.eq("150");

      (await this.bridge.totalValidatorPower()).toString().should.eq("450");
    });

    it("should update validator powers", async () => {
      await this.bridge.updateValidatorPowers(
        [
          ["0x652D89a66Eb4eA55366c45b1f9ACfc8e2179E1c5", 150],
          ["0x88e1cd00710495EEB93D4f522d16bC8B87Cb00FE", 0],
          ["0x85109F11A7E1385ee826FbF5dA97bB97dba0D76f", 200],
        ],
        { from: owner },
      );

      (
        await this.bridge.validatorPowers(
          "0x652D89a66Eb4eA55366c45b1f9ACfc8e2179E1c5",
        )
      )
        .toString()
        .should.eq("150");

      (
        await this.bridge.validatorPowers(
          "0x88e1cd00710495EEB93D4f522d16bC8B87Cb00FE",
        )
      )
        .toString()
        .should.eq("0");

      (
        await this.bridge.validatorPowers(
          "0x85109F11A7E1385ee826FbF5dA97bB97dba0D76f",
        )
      )
        .toString()
        .should.eq("200");

      (await this.bridge.totalValidatorPower()).toString().should.eq("550");
    });
  });
});
